pipeline {
    agent any

    environment {
        IMAGE_NAME = 'nestjs-app'
        REGISTRY_HOST = 'prasadmpotdar'
        FULL_IMAGE_NAME = "${REGISTRY_HOST}/${IMAGE_NAME}"
        DOCKER_REPO_URL = 'https://hub.docker.com/r/prasadmpotdar/nextjs-app' // Docker Hub repository URL
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/prasad-potdar/nextjs-docker-cicd-deployment-test.git'
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'docker-hub-access-token', variable: 'DOCKER_ACCESS_TOKEN')]) {
                        // Login to Docker Hub
                        sh """
                        echo $DOCKER_ACCESS_TOKEN | docker login -u $REGISTRY_HOST --password-stdin
                        """

                        // Build and push Docker image
                        sh """
                        docker build -t ${FULL_IMAGE_NAME}:${env.BUILD_NUMBER} -f deployment/Dockerfile .
                        docker tag ${FULL_IMAGE_NAME}:${env.BUILD_NUMBER} ${FULL_IMAGE_NAME}:latest
                        docker push ${FULL_IMAGE_NAME}:${env.BUILD_NUMBER}
                        docker push ${FULL_IMAGE_NAME}:latest
                        """
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // Replace the <IMAGE_TAG> placeholder in deployment.yaml with the actual image tag
                    sh """
                    sed -i "" 's|<IMAGE_TAG>|${FULL_IMAGE_NAME}:${env.BUILD_NUMBER}|g' deployment/k8s/deployment.yaml
                    kubectl apply -f deployment/k8s/deployment.yaml
                    kubectl apply -f deployment/k8s/service.yaml
                    """
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo "Image pushed to Docker Hub: ${DOCKER_REPO_URL}"
            echo 'Deployment Successful'
        }
        failure {
            echo 'Deployment Failed'
        }
    }
}
